diff --git a/lib/supabase/admin.ts b/lib/supabase/admin.ts
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/lib/supabase/admin.ts
@@ -0,0 +1,25 @@
+import { createServerClient } from '@supabase/ssr'
+import { cookies } from 'next/headers'
+import { Database } from './types'
+
+// Admin client with service role key - bypasses RLS
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
+const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
+
+export const supabaseAdmin = createServerClient<Database>(
+  supabaseUrl,
+  supabaseServiceKey,
+  {
+    cookies: {
+      getAll() {
+        return cookies().getAll()
+      },
+      setAll() {
+        // No-op for admin client
+      },
+    },
+  }
+)
+
+// Re-export for consistency
+export { supabaseAdmin as default }
diff --git a/lib/supabase/server.ts b/lib/supabase/server.ts
new file mode 100644
index 0000000..d4e5f6g
--- /dev/null
+++ b/lib/supabase/server.ts
@@ -0,0 +1,25 @@
+import { createServerClient } from '@supabase/ssr'
+import { cookies } from 'next/headers'
+import { Database } from './types'
+
+export async function createServerSupabaseClient() {
+  const cookieStore = cookies()
+
+  return createServerClient<Database>(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+      cookies: {
+        getAll() {
+          return cookieStore.getAll()
+        },
+        setAll() {
+          // No-op for server-side operations
+        },
+      },
+    }
+  )
+}
+
+// Re-export for consistency
+export { createServerSupabaseClient as default }
diff --git a/lib/supabase/client.ts b/lib/supabase/client.ts
new file mode 100644
index 0000000..g7h8i9j
--- /dev/null
+++ b/lib/supabase/client.ts
@@ -0,0 +1,20 @@
+import { createBrowserClient } from '@supabase/ssr'
+import { Database } from './types'
+
+// Client-side Supabase client - ONLY use this in client components
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
+
+// Regular client for browser operations (Row Level Security enabled)
+export const supabase = createBrowserClient<Database>(supabaseUrl, supabaseAnonKey)
+
+// Re-export the client creation function for consistency
+export function createClientSupabaseClient() {
+  return createBrowserClient<Database>(supabaseUrl, supabaseAnonKey)
+}
+
+// Re-export for consistency
+export { supabase as default }
diff --git a/lib/supabase/types.ts b/lib/supabase/types.ts
new file mode 100644
index 0000000..j1k2l3m
--- /dev/null
+++ b/lib/supabase/types.ts
@@ -0,0 +1,120 @@
+export interface Database {
+  public: {
+    Tables: {
+      users: {
+        Row: {
+          id: string
+          email: string
+          name: string
+          role: string
+          avatar?: string
+          verified?: boolean
+          created_at: string
+          updated_at: string
+        }
+        Insert: {
+          id?: string
+          email: string
+          name: string
+          role: string
+          avatar?: string
+          verified?: boolean
+          created_at?: string
+          updated_at?: string
+        }
+        Update: {
+          id?: string
+          email?: string
+          name?: string
+          role?: string
+          avatar?: string
+          verified?: boolean
+          created_at?: string
+          updated_at?: string
+        }
+      }
+      products: {
+        Row: {
+          id: string
+          title: string
+          description: string
+          price: number
+          original_price?: number
+          images: string[]
+          category: string
+          region: string[]
+          in_stock: boolean
+          stock_count: number
+          commission: number
+          active: boolean
+          supplier_id: string
+          created_at: string
+          updated_at: string
+          sku?: string
+        }
+        Insert: {
+          id?: string
+          title: string
+          description: string
+          price: number
+          original_price?: number
+          images?: string[]
+          category: string
+          region?: string[]
+          in_stock?: boolean
+          stock_count?: number
+          commission: number
+          active?: boolean
+          supplier_id: string
+          created_at?: string
+          updated_at?: string
+          sku?: string
+        }
+        Update: {
+          id?: string
+          title?: string
+          description?: string
+          price?: number
+          original_price?: number
+          images?: string[]
+          category?: string
+          region?: string[]
+          in_stock?: boolean
+          stock_count?: number
+          commission?: number
+          active?: boolean
+          supplier_id?: string
+          created_at?: string
+          updated_at?: string
+          sku?: string
+        }
+      }
+      orders: {
+        Row: {
+          id: string
+          customer_id: string
+          total: number
+          status: string
+          shipping_address: any
+          billing_address: any
+          payment_method: string
+          stripe_payment_intent_id?: string
+          created_at: string
+          updated_at: string
+        }
+        Insert: {
+          id?: string
+          customer_id: string
+          total: number
+          status?: string
+          shipping_address?: any
+          billing_address?: string
+          payment_method: string
+          stripe_payment_intent_id?: string
+          created_at?: string
+          updated_at?: string
+        }
+        Update: {
+          id?: string
+          customer_id?: string
+          total?: number
+          status?: string
+          shipping_address?: any
+          billing_address?: any
+          payment_method?: string
+          stripe_payment_intent_id?: string
+          created_at?: string
+          updated_at?: string
+        }
+      }
+      shops: {
+        Row: {
+          id: string
+          influencer_id: string
+          handle: string
+          name: string
+          description?: string
+          logo?: string
+          created_at: string
+          updated_at: string
+        }
+        Insert: {
+          id?: string
+          influencer_id: string
+          handle: string
+          name: string
+          description?: string
+          logo?: string
+          created_at?: string
+          updated_at?: string
+        }
+        Update: {
+          id?: string
+          influencer_id?: string
+          handle?: string
+          name?: string
+          description?: string
+          logo?: string
+          created_at?: string
+          updated_at?: string
+        }
+      }
+    }
+    Views: {
+      [_ in never]: never
+    }
+    Functions: {
+      decrement_stock: {
+        Args: {
+          product_id: string
+          quantity: number
+        }
+        Returns: number
+      }
+    }
+    Enums: {
+      [_ in never]: never
+    }
+  }
+}
diff --git a/lib/types.ts b/lib/types.ts
index n4o5p6q..r7s8t9u 100644
--- a/lib/types.ts
+++ b/lib/types.ts
@@ -279,3 +279,6 @@ export interface InfluencerPayouts {
   influencerId: string
   amount: number
 }
+
+// Icon type for Lucide icons and other icon components
+export type Icon = React.ComponentType<{ className?: string; size?: number }>
diff --git a/tests/icon-typing.test.tsx b/tests/icon-typing.test.tsx
new file mode 100644
index 0000000..t1u2v3w
--- /dev/null
+++ b/tests/icon-typing.test.tsx
@@ -0,0 +1,67 @@
+import { render, screen } from '@testing-library/react'
+import { Heart, Star, ShoppingCart } from 'lucide-react'
+import type { Icon } from '@/lib/types'
+
+// Test component that uses the Icon type
+interface FeatureProps {
+  icon: Icon
+  title: string
+  description: string
+}
+
+function Feature({ icon: Icon, title, description }: FeatureProps) {
+  return (
+    <div className="flex items-start space-x-3">
+      <Icon className="w-6 h-6 text-blue-600 mt-1" />
+      <div>
+        <h3 className="font-semibold text-gray-900">{title}</h3>
+        <p className="text-gray-600">{description}</p>
+      </div>
+    </div>
+  )
+}
+
+describe('Icon Type Safety', () => {
+  it('should render Lucide icons with className prop without type errors', () => {
+    const features = [
+      {
+        icon: Heart,
+        title: 'Favorites',
+        description: 'Save your favorite products'
+      },
+      {
+        icon: Star,
+        title: 'Reviews',
+        description: 'Read customer reviews'
+      },
+      {
+        icon: ShoppingCart,
+        title: 'Shopping',
+        description: 'Add items to your cart'
+      }
+    ]
+
+    render(
+      <div className="space-y-4">
+        {features.map((feature, index) => (
+          <Feature
+            key={index}
+            icon={feature.icon}
+            title={feature.title}
+            description={feature.description}
+          />
+        ))}
+      </div>
+    )
+
+    // Verify all features are rendered
+    expect(screen.getByText('Favorites')).toBeInTheDocument()
+    expect(screen.getByText('Reviews')).toBeInTheDocument()
+    expect(screen.getByText('Shopping')).toBeInTheDocument()
+
+    // Verify icons are present (they should be rendered as SVGs)
+    const icons = document.querySelectorAll('svg')
+    expect(icons).toHaveLength(3)
+  })
+
+  it('should accept Icon type with optional className and size props', () => {
+    // This test ensures the Icon type is correctly defined
+    const testIcon: Icon = ({ className, size }) => (
+      <div className={className} style={{ width: size, height: size }}>
+        Test Icon
+      </div>
+    )
+
+    render(
+      <Feature
+        icon={testIcon}
+        title="Test Feature"
+        description="Testing icon type safety"
+      />
+    )
+
+    expect(screen.getByText('Test Feature')).toBeInTheDocument()
+    expect(screen.getByText('Test Icon')).toBeInTheDocument()
+  })
+})
diff --git a/app/api/checkout/route.ts b/app/api/checkout/route.ts
index x4y5z6a..b7c8d9e 100644
--- a/app/api/checkout/route.ts
+++ b/app/api/checkout/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { supabaseAdmin } from "@/lib/supabase/admin"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/webhooks/stripe/route.ts b/app/api/webhooks/stripe/route.ts
index f1g2h3i..j4k5l6m 100644
--- a/app/api/webhooks/stripe/route.ts
+++ b/app/api/webhooks/stripe/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { NextRequest, NextResponse } from "next/server"
 import { supabaseAdmin } from "@/lib/supabase/admin"
 import Stripe from "stripe"
diff --git a/app/api/auth/sign-up/route.ts b/app/api/auth/sign-up/route.ts
index n7o8p9q..r1s2t3u 100644
--- a/app/api/auth/sign-up/route.ts
+++ b/app/api/auth/sign-up/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { supabaseAdmin } from "@/lib/supabase/admin"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/debug/database/route.ts b/app/api/debug/database/route.ts
index v4w5x6y..z7a8b9c 100644
--- a/app/api/debug/database/route.ts
+++ b/app/api/debug/database/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { supabaseAdmin } from '@/lib/supabase/admin'
 import { NextResponse } from 'next/server'
 
@@ -44,7 +45,12 @@ export async function GET() {
   }
 
   // Test RPC function
-  const { data: rpcTest, error: rpcError } = await supabaseAdmin.rpc('decrement_stock', { product_id: 'test', quantity: 1 }).catch(() => null) // This RPC might not exist, so we catch the error
+  let rpcTest = null
+  let rpcError = null
+  try {
+    const result = await supabaseAdmin.rpc('decrement_stock', { product_id: 'test', quantity: 1 })
+    rpcTest = result.data
+    rpcError = result.error
+  } catch (error) {
+    // This RPC might not exist, so we catch the error
+  }
 
   return NextResponse.json({
     connection: testConnection,
diff --git a/app/api/products/route.ts b/app/api/products/route.ts
index d1e2f3g..h4i5j6k 100644
--- a/app/api/products/route.ts
+++ b/app/api/products/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from '@/lib/supabase/server'
 import { supabaseAdmin } from '@/lib/supabase/admin'
 import { NextRequest, NextResponse } from 'next/server'
diff --git a/app/api/auth/reset/route.ts b/app/api/auth/reset/route.ts
index l7m8n9o..p1q2r3s 100644
--- a/app/api/auth/reset/route.ts
+++ b/app/api/auth/reset/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
 import { z } from "zod"
diff --git a/app/api/auth/callback/route.ts b/app/api/auth/callback/route.ts
index t4u5v6w..x7y8z9a 100644
--- a/app/api/auth/callback/route.ts
+++ b/app/api/auth/callback/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { NextRequest, NextResponse } from 'next/server'
 import { createServerSupabaseClient } from '@/lib/supabase/server'
 import { redirect } from 'next/navigation'
diff --git a/app/api/auth/sign-in/route.ts b/app/api/auth/sign-in/route.ts
index b1c2d3e..f4g5h6i 100644
--- a/app/api/auth/sign-in/route.ts
+++ b/app/api/auth/sign-in/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { NextRequest, NextResponse } from 'next/server'
 import { createServerSupabaseClient } from '@/lib/supabase/server'
 import { z } from 'zod'
diff --git a/app/api/commissions/route.ts b/app/api/commissions/route.ts
index j7k8l9m..n1o2p3q 100644
--- a/app/api/commissions/route.ts
+++ b/app/api/commissions/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
 import { z } from "zod"
diff --git a/app/api/dashboard/supplier/route.ts b/app/api/dashboard/supplier/route.ts
index r4s5t6u..v7w8x9y 100644
--- a/app/api/dashboard/supplier/route.ts
+++ b/app/api/dashboard/supplier/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
 import { z } from "zod"
diff --git a/app/api/orders/[id]/route.ts b/app/api/orders/[id]/route.ts
index z1a2b3c..d4e5f6g 100644
--- a/app/api/orders/[id]/route.ts
+++ b/app/api/orders/[id]/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
 import { z } from "zod"
diff --git a/app/api/orders/route.ts b/app/api/orders/route.ts
index h7i8j9k..l1m2n3o 100644
--- a/app/api/orders/route.ts
+++ b/app/api/orders/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse }
diff --git a/app/api/shop/[handle]/route.ts b/app/api/shop/[handle]/route.ts
index p4q5r6s..t7u8v9w 100644
--- a/app/api/shop/[handle]/route.ts
+++ b/app/api/shop/[handle]/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
 import { z } from "zod"
diff --git a/app/api/influencer/shop/route.ts b/app/api/influencer/shop/route.ts
index x1y2z3a..b4c5d6e 100644
--- a/app/api/inhook/route.ts
+++ b/app/api/influencer/shop/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/influencer/shop/[id]/route.ts b/app/api/influencer/shop/[id]/route.ts
index f7g8h9i..j1k2l3m 100644
--- a/app/api/influencer/shop/[id]/route.ts
+++ b/app/api/influencer/shop/[id]/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/admin/verification/[requestId]/review/route.ts b/app/api/admin/verification/[requestId]/review/route.ts
index n4o5p6q..r7s8t9u 100644
--- a/app/api/admin/verification/[requestId]/review/route.ts
+++ b/app/api/admin/verification/[requestId]/review/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/products/[id]/route.ts b/app/api/products/[id]/route.ts
index v1w2x3y..z4a5b6c 100644
--- a/app/api/products/[id]/route.ts
+++ b/app/api/products/[id]/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/products/import/route.ts b/app/api/products/import/route.ts
index d7e8f9g..h1i2j3k 100644
--- a/app/api/products/import/route.ts
+++ b/app/api/products/import/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'test'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/admin/users/route.ts b/app/api/admin/users/route.ts
index l4m5n6o..p7q8r9s 100644
--- a/app/api/admin/users/route.ts
+++ b/app/api/admin/users/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/onboarding/brand/route.ts b/app/api/onboarding/brand/route.ts
index t1u2v3w..x4y5z6a 100644
--- a/app/api/onboarding/brand/route.ts
+++ b/app/api/onboarding/brand/route.ts
@@ -1,3 +1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/onboarding/docs/route.ts b/app/api/onboarding/docs/route.ts
index b7c8d9e..f1g2h3i 100644
--- a/app/api/onboarding/docs/route.ts
+++ b/app/api/onboarding/docs/route.ts
@@ -1,3+1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/onboarding/docs/[id]/route.ts b/app/api/onboarding/docs/[id]/route.ts
index j4k5l6m..n7o8p9q 100644
--- a/app/api/onboarding/docs/[id]/route.ts
+++ b/app/api/onboarding/docs/[id]/route.ts
@@ -1,3+1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/onboarding/influencer/route.ts b/app/api/onboarding/influencer/route.ts
index r1s2t3u..v4w5x6y 100644
--- a/app/api/onboarding/influencer/route.ts
+++ b/app/api/onboarding/influencer/route.ts
@@ -1,3+1,4 @@
+export/index.ts
+++ b/app/api/onboarding/influencer/route.ts
@@ -1,3+1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
diff --git a/app/api/admin/users/[id]/verify/route.ts b/app/api/admin/users/[id]/verify/route.ts
index z7a8b9c..d1e2f3g 100644
--- a/app/api/admin/users/[id]/verify/route.ts
+++ b/app/api/admin/users/[id]/verify/route.ts
@@ -1,3+1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
diff --git a/app/api/products/export/route.ts b/app/api/products/export/route.ts
index h4i5j6k..l7m8n9o 100644
--- a/app/api/products/export/route.ts
+++ b/app/api/products/export/route.ts
@@ -1,3+1,4 @@
+export const runtime = 'nodejs'
 import { createServerSupabaseClient } from "@/lib/supabase/server"
 import { NextRequest, NextResponse } from "next/server"
