diff --git a/components/shop/product-filters.tsx b/components/shop/product-filters.tsx
index 1234567..abcdef0 100644
--- a/components/shop/product-filters.tsx
+++ b/components/shop/product-filters.tsx
@@ -1,6 +1,7 @@
 "use client"
 
 import { useState, useEffect } from "react"
+import { useRouter, useSearchParams } from "next/navigation"
 import { Button } from "@/components/ui/button"
 import { Input } from "@/components/ui/input"
 import { Label } from "@/components/ui/label"
@@ -8,6 +9,7 @@ import { Badge } from "@/components/ui/badge"
 import { Separator } from "@/components/ui/separator"
 import { Slider } from "@/components/ui/slider"
 import { Check, X, Filter, Search, Star, Tag, DollarSign } from "lucide-react"
+import { cn } from "@/lib/utils"
 
 export interface ProductFilters {
   search: string
@@ -15,6 +17,7 @@ export interface ProductFilters {
   priceRange: [number, number]
   inStock: boolean
   onSale: boolean
+  rating: number
   sortBy: string
   brands: string[]
 }
@@ -22,6 +25,7 @@ export interface ProductFilters {
 interface ProductFiltersProps {
   onFiltersChange: (filters: ProductFilters) => void
   totalProducts: number
+  className?: string
 }
 
 const sortOptions = [
@@ -29,6 +33,7 @@ const sortOptions = [
   { value: "price-low", label: "Price: Low to High" },
   { value: "price-high", label: "Price: High to Low" },
   { value: "rating", label: "Highest Rated" },
+  { value: "popularity", label: "Most Popular" },
   { value: "newest", label: "Newest First" },
   { value: "oldest", label: "Oldest First" }
 ]
@@ -36,6 +41,7 @@ const sortOptions = [
 const categories = [
   "Electronics",
   "Fashion",
+  "Home & Garden",
   "Sports",
   "Beauty",
   "Books",
@@ -43,6 +49,7 @@ const categories = [
   "Automotive",
   "Health",
   "Toys",
+  "Food & Beverage",
   "Other"
 ]
 
@@ -50,6 +57,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
   const [filters, setFilters] = useState<ProductFilters>({
     search: "",
     category: "",
+    priceRange: [0, 1000],
     inStock: true,
     onSale: false,
     rating: 0,
@@ -57,6 +65,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
   })
 
   const [isExpanded, setIsExpanded] = useState(true)
+  const router = useRouter()
+  const searchParams = useSearchParams()
 
   // Load filters from URL on mount
   useEffect(() => {
@@ -64,6 +73,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     const category = searchParams.get("category") || ""
     const priceMin = searchParams.get("priceMin") || "0"
     const priceMax = searchParams.get("priceMax") || "1000"
+    const rating = searchParams.get("rating") || "0"
     const sortBy = searchParams.get("sortBy") || "newest"
     const inStock = searchParams.get("inStock") !== "false"
     const onSale = searchParams.get("onSale") === "true"
@@ -71,6 +81,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     const newFilters: ProductFilters = {
       search,
       category,
+      priceRange: [parseInt(priceMin), parseInt(priceMax)],
       inStock,
       onSale,
       rating: parseInt(rating),
@@ -78,6 +89,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
       brands: brands ? brands.split(",") : []
     }
     setFilters(newFilters)
+    onFiltersChange(newFilters)
   }, [searchParams, onFiltersChange])
 
   // Update URL when filters change
@@ -85,6 +97,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     const params = new URLSearchParams(searchParams)
     
     if (filters.search) params.set("search", filters.search)
+    if (filters.category) params.set("category", filters.category)
     if (filters.priceRange[0] > 0) params.set("priceMin", filters.priceRange[0].toString())
     if (filters.priceRange[1] < 1000) params.set("priceMax", filters.priceRange[1].toString())
     if (filters.rating > 0) params.set("rating", filters.rating.toString())
@@ -92,6 +105,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     if (!filters.inStock) params.set("inStock", "false")
     if (filters.onSale) params.set("onSale", "true")
     if (filters.brands.length > 0) params.set("brands", filters.brands.join(","))
+    
     router.replace(`?${params.toString()}`, { scroll: false })
   }, [filters, router, searchParams])
 
@@ -99,6 +113,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     const newFilters = { ...filters, ...updates }
     setFilters(newFilters)
     onFiltersChange(newFilters)
+    // URL update is handled by useEffect above
   }
 
   const clearFilters = () => {
@@ -106,6 +121,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
       search: "",
       category: "",
       priceRange: [0, 1000],
+      inStock: true,
       onSale: false,
       rating: 0,
       sortBy: "newest",
@@ -113,6 +129,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
     })
   }
 
+  // Check if any filters are active
   const hasActiveFilters = Object.values(filters).some(value => {
     if (Array.isArray(value)) return value.some(v => v !== 0)
     if (typeof value === "string") return value !== ""
@@ -120,6 +137,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
   })
 
   return (
+    <div className={cn("space-y-6", className)}>
       <div className="flex items-center justify-between">
         <div className="flex items-center space-x-2">
           <Filter className="h-4 w-4" />
@@ -127,6 +145,7 @@ export function ProductFilters({ onFiltersChange, totalProducts, className }: Produ
         </div>
         <Button
           variant="ghost"
+          size="sm"
           onClick={() => setIsExpanded(!isExpanded)}
           className="h-8 w-8 p-0"
         >
@@ -134,6 +153,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
       </div>
 
       {isExpanded && (
+        <div className="space-y-6">
           {/* Search */}
           <div className="space-y-2">
             <Label htmlFor="search">Search Products</Label>
@@ -141,6 +161,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
               <Search className="h-4 w-4 text-gray-400" />
               <Input
                 id="search"
+                type="text"
                 placeholder="Search by name, description, or tags..."
                 value={filters.search}
                 onChange={(e) => updateFilters({ search: e.target.value })}
@@ -148,6 +169,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
             </div>
           </div>
 
+          <Separator />
 
           {/* Categories */}
           <div className="space-y-2">
@@ -155,6 +177,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
             <div className="grid grid-cols-2 gap-2">
               {categories.map((category) => (
                 <Button
+                  key={category}
                   variant={filters.category === category ? "default" : "outline"}
                   size="sm"
                   onClick={() => updateFilters({ category })}
@@ -162,6 +185,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 >
                   {category}
                 </Button>
               ))}
             </div>
           </div>
 
+          <Separator />
 
           {/* Price Range */}
           <div className="space-y-2">
@@ -169,6 +193,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
             <div className="space-y-4">
               <Slider
                 value={filters.priceRange}
+                min={0}
+                max={1000}
+                step={10}
                 onValueChange={(value) => updateFilters({ priceRange: value as [number, number] })}
                 className="w-full"
               />
@@ -176,6 +201,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 <span className="text-sm text-gray-500">
                   ${filters.priceRange[0]} - ${filters.priceRange[1]}
                 </span>
+                <Button
+                  variant="outline"
+                  size="sm"
+                  onClick={() => updateFilters({ priceRange: [0, 1000] })}
+                  className="ml-auto"
+                >
+                  Reset
+                </Button>
               </div>
             </div>
           </div>
 
+          <Separator />
 
           {/* Rating Filter */}
           <div className="space-y-2">
@@ -183,6 +209,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
             <div className="space-y-2">
               {[1, 2, 3, 4, 5].map((rating) => (
                 <Button
+                  key={rating}
                   variant={filters.rating === rating ? "default" : "outline"}
                   size="sm"
                   onClick={() => updateFilters({ rating })}
@@ -190,6 +217,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 >
                   <div className="flex items-center space-x-2">
                     {Array.from({ length: rating }).map((_, i) => (
+                      <Star key={i} className="h-3 w-3 fill-current" />
                     ))}
                     <span>& Up</span>
                   </div>
                 </Button>
               ))}
             </div>
           </div>
 
+          <Separator />
 
           {/* Stock & Sale Filters */}
           <div className="space-y-3">
@@ -197,6 +225,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
               <div className="flex items-center space-x-2">
                 <input
                   type="checkbox"
+                  id="inStock"
                   checked={filters.inStock}
                   onChange={(e) => updateFilters({ inStock: e.target.checked })}
                   className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
@@ -204,6 +233,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 <Label htmlFor="inStock">In Stock Only</Label>
               </div>
               <div className="flex items-center space-x-2">
                 <input
                   type="checkbox"
                   id="onSale"
                   checked={filters.onSale}
                   onChange={(e) => updateFilters({ onSale: e.target.checked })}
                   className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
@@ -211,6 +241,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 <Label htmlFor="onSale">On Sale Only</Label>
               </div>
             </div>
           </div>
 
+          <Separator />
 
           {/* Sort Options */}
           <div className="space-y-2">
@@ -218,6 +249,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
             <select
               value={filters.sortBy}
               onChange={(e) => updateFilters({ sortBy: e.target.value })}
+              className="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500"
             >
               {sortOptions.map((option) => (
                 <option key={option.value} value={option.value}>
@@ -225,6 +257,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                 </option>
               ))}
             </select>
           </div>
 
+          <Separator />
 
           {/* Active Filters Display */}
           {hasActiveFilters && (
@@ -232,6 +265,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
               <div className="flex flex-wrap gap-2">
                 {filters.search && (
                   <Badge variant="secondary" className="flex items-center space-x-1">
+                    <Search className="h-3 w-3" />
                     <span>"{filters.search}"</span>
                     <button
                       onClick={() => updateFilters({ search: "" })}
@@ -239,6 +273,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                     >
                       <X className="h-3 w-3" />
                     </button>
                   </Badge>
                 )}
                 {filters.category && (
                   <Badge variant="secondary" className="flex items-center space-x-1">
+                    <Tag className="h-3 w-3" />
                     <span>{filters.category}</span>
                     <button
                       onClick={() => updateFilters({ category: "" })}
@@ -246,6 +281,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                     >
                       <X className="h-3 w-3" />
                     </button>
                   </Badge>
                 )}
                 {filters.rating > 0 && (
                   <Badge variant="secondary" className="flex items-center space-x-1">
+                    <Star className="h-3 w-3" />
                     <span>{filters.rating}+ Stars</span>
                     <button
                       onClick={() => updateFilters({ rating: 0 })}
@@ -253,6 +289,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                     >
                       <X className="h-3 w-3" />
                     </button>
                   </Badge>
                 )}
                 {filters.priceRange[0] > 0 || filters.priceRange[1] < 1000 ? (
                   <Badge variant="secondary" className="flex items-center space-x-1">
+                    <DollarSign className="h-3 w-3" />
                     <span>${filters.priceRange[0]} - ${filters.priceRange[1]}</span>
                     <button
                       onClick={() => updateFilters({ priceRange: [0, 1000] })}
@@ -260,6 +297,7 @@ export function ProductFilters({ onFiltersChange, totalFilters, className }: Produ
                     >
                       <X className="h-3 w-3" />
                     </button>
                   </Badge>
                 ) : null}
               </div>
               <Button
                 variant="ghost"
                 size="sm"
                 onClick={clearFilters}
                 className="text-gray-500 hover:text-gray-700"
               >
                 Clear All
               </Button>
             </div>
           )}
 
           {/* Results Count */}
           <div className="pt-4 border-t">
             <p className="text-sm text-gray-600">
               Showing {totalProducts} products
             </p>
           </div>
         </div>
       )}
     </div>
   )
 }
