diff --git a/docs/DEVELOPER_GUIDE.md b/docs/DEVELOPER_GUIDE.md
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/docs/DEVELOPER_GUIDE.md
@@ -0,0 +1,300 @@
+# Developer Guide
+
+This guide covers essential development workflows for the One-Link project.
+
+## 🚀 Quick Start
+
+```bash
+# Install dependencies
+pnpm install
+
+# Start development server
+pnpm dev
+
+# Run tests
+pnpm test
+```
+
+## 📦 Patch Management
+
+### Applying Patches
+
+Patches are located in `/patches/` directory and should be applied in order:
+
+```bash
+# 1. Check current git status
+git status
+
+# 2. Apply a specific patch
+git apply patches/fix-typescript-errors.patch
+
+# 3. Verify changes
+git status
+git diff --cached
+```
+
+### Patch Application Order
+
+Apply patches in this recommended order:
+
+1. **`fix-typescript-errors.patch`** - TypeScript fixes first
+2. **`fix-supabase-and-build-errors.patch`** - Core infrastructure
+3. **`fix-shop-product-display.patch`** - Shop display fixes
+4. **`fix-shop-product-count.patch`** - Product count accuracy
+5. **`enhance-product-filters.patch`** - Advanced filtering
+6. **`enhance-shop-features.patch`** - Extended shop functionality
+7. **`improve-onboarding-and-docs.patch`** - Onboarding enhancements
+
+### Verifying Patch Application
+
+```bash
+# Check that files were modified
+git status
+
+# View specific changes
+git diff --cached
+
+# Test the application
+pnpm dev
+```
+
+## 🗄️ Database Migrations
+
+### Running Migrations
+
+Migrations are located in `/sql/migrations/`:
+
+```bash
+# 1. Connect to your Supabase database
+# Use Supabase Dashboard or psql
+
+# 2. Run migration
+psql -h your-project.supabase.co -U postgres -d postgres -f sql/migrations/002-shop-optimizations.sql
+
+# 3. Verify migration
+psql -h your-project.supabase.co -U postgres -d postgres -c "
+SELECT indexname, tablename 
+FROM pg_indexes 
+WHERE tablename = 'products' 
+  AND indexname LIKE 'idx_products_%';
+"
+```
+
+### Migration Verification
+
+```sql
+-- Check new columns exist
+SELECT column_name, data_type, is_nullable 
+FROM information_schema.columns 
+WHERE table_name = 'products' 
+  AND column_name IN ('rating', 'review_count', 'tags', 'popularity_score');
+
+-- Check indexes were created
+SELECT indexname, tablename 
+FROM pg_indexes 
+WHERE tablename = 'products' 
+  AND indexname LIKE 'idx_products_%';
+
+-- Test performance improvements
+EXPLAIN ANALYZE SELECT * FROM products WHERE category = 'clothing';
+```
+
+## 🧪 Testing
+
+### Playwright Tests
+
+```bash
+# Run all tests
+pnpm exec playwright test
+
+# Run specific test file
+pnpm exec playwright test tests/onboarding-flow.spec.ts
+
+# Run tests in headed mode (see browser)
+pnpm exec playwright test --headed
+
+# Run tests with debug
+pnpm exec playwright test --debug
+
+# Generate test report
+pnpm exec playwright show-report
+```
+
+### Test Categories
+
+- **`tests/auth.spec.ts`** - Authentication flows
+- **`tests/shop-improvements.test.ts`** - Shop functionality
+- **`tests/onboarding-flow.spec.ts`** - Onboarding process
+- **`tests/supplier-commission.spec.ts`** - Commission system
+
+### Test Data Setup
+
+```bash
+# Reset test database (if applicable)
+pnpm run test:reset
+
+# Seed test data
+pnpm run test:seed
+```
+
+## 🔄 Rollback Procedures
+
+### Rolling Back Patches
+
+```bash
+# 1. Revert patch
+git apply --reverse patches/patch-name.patch
+
+# 2. Verify rollback
+git status
+git diff
+
+# 3. Test application
+pnpm dev
+```
+
+### Rolling Back Migrations
+
+```sql
+-- Drop indexes
+DROP INDEX IF EXISTS idx_products_name;
+DROP INDEX IF EXISTS idx_products_category;
+DROP INDEX IF EXISTS idx_products_price;
+DROP INDEX IF EXISTS idx_products_active;
+DROP INDEX IF EXISTS idx_products_category_price;
+DROP INDEX IF EXISTS idx_products_rating;
+DROP INDEX IF EXISTS idx_products_popularity;
+DROP INDEX IF EXISTS idx_products_tags;
+DROP INDEX IF EXISTS idx_products_review_count;
+
+-- Drop columns
+ALTER TABLE products DROP COLUMN IF EXISTS rating;
+ALTER TABLE products DROP COLUMN IF EXISTS review_count;
+ALTER TABLE products DROP COLUMN IF EXISTS tags;
+ALTER TABLE products DROP COLUMN IF EXISTS popularity_score;
+
+-- Drop views
+DROP VIEW IF EXISTS active_products;
+DROP VIEW IF EXISTS trending_products;
+
+-- Drop function and trigger
+DROP TRIGGER IF EXISTS trigger_update_product_popularity ON products;
+DROP FUNCTION IF EXISTS update_product_popularity();
+```
+
+### Emergency Rollback
+
+```bash
+# Reset to last working commit
+git reset --hard HEAD~1
+
+# Force push (if already pushed)
+git push --force-with-lease origin main
+```
+
+## 🛠️ Development Workflow
+
+### Before Making Changes
+
+```bash
+# 1. Check current status
+git status
+
+# 2. Pull latest changes
+git pull origin main
+
+# 3. Create feature branch
+git checkout -b feature/your-feature-name
+
+# 4. Verify clean working directory
+git status
+```
+
+### Making Changes
+
+```bash
+# 1. Make your changes
+# 2. Test locally
+pnpm dev
+pnpm test
+
+# 3. Stage changes
+git add .
+
+# 4. Commit with clear message
+git commit -m "feat: add your feature description"
+```
+
+### Testing Changes
+
+```bash
+# 1. Run unit tests
+pnpm test
+
+# 2. Run Playwright tests
+pnpm exec playwright test
+
+# 3. Test manually
+pnpm dev
+# Navigate to relevant pages and test functionality
+```
+
+### Creating Patches
+
+```bash
+# 1. Make your changes and commit them
+git add .
+git commit -m "feat: your feature"
+
+# 2. Create patch from last commit
+git format-patch -1 HEAD --stdout > patches/your-feature.patch
+
+# 3. Test patch application
+git reset --hard HEAD~1
+git apply patches/your-feature.patch
+```
+
+## 📋 Pre-Handover Checklist
+
+Before handing over to Claude Desktop, ensure:
+
+### ✅ Code Quality
+- [ ] All TypeScript errors resolved
+- [ ] No console.log statements in production code
+- [ ] Proper error handling implemented
+- [ ] Code follows project conventions
+
+### ✅ Testing
+- [ ] All Playwright tests pass
+- [ ] Unit tests pass
+- [ ] Manual testing completed
+- [ ] Edge cases covered
+
+### ✅ Database
+- [ ] Migrations applied successfully
+- [ ] New columns exist and are properly typed
+- [ ] Indexes created and verified
+- [ ] Performance improvements confirmed
+
+### ✅ Documentation
+- [ ] README.md updated
+- [ ] CHANGELOG.md updated
+- [ ] APPLY.md and ROLLBACK.md created
+- [ ] DB-NOTES.md updated
+
+### ✅ Git Status
+- [ ] Working directory clean
+- [ ] All changes committed
+- [ ] Patches created and tested
+- [ ] No sensitive data in commits
+
+### ✅ Application Health
+- [ ] Development server starts without errors
+- [ ] Build process completes successfully
+- [ ] No runtime errors in console
+- [ ] All major features working
+
+## 🚨 Troubleshooting
+
+### Common Issues
+
+**Patch Application Fails**
+```bash
+# Check for conflicts
+git status
+
+# View patch content
+cat patches/patch-name.patch
+
+# Apply with 3-way merge
+git apply --3way patches/patch-name.patch
+```
+
+**Migration Errors**
+```sql
+-- Check if objects already exist
+SELECT * FROM pg_indexes WHERE indexname LIKE 'idx_products_%';
+SELECT column_name FROM information_schema.columns WHERE table_name = 'products';
+```
+
+**Test Failures**
+```bash
+# Clear test cache
+pnpm exec playwright install
+
+# Run with verbose output
+pnpm exec playwright test --reporter=verbose
+```
+
+**Build Errors**
+```bash
+# Clear Next.js cache
+rm -rf .next
+pnpm dev
+
+# Check TypeScript
+pnpm run typecheck
+```
+
+## 📚 Additional Resources
+
+- **Project Structure**: See `README.md` for overview
+- **Database Schema**: See `DATABASE_SCHEMA.md`
+- **Design System**: See `DESIGN_SYSTEM.md`
+- **API Documentation**: See individual route files in `/app/api/`
+
+## 🔗 Quick Commands Reference
+
+```bash
+# Development
+pnpm dev          # Start dev server
+pnpm build        # Build for production
+pnpm start        # Start production server
+
+# Testing
+pnpm test         # Run unit tests
+pnpm exec playwright test  # Run E2E tests
+pnpm exec playwright test --headed  # Run with browser visible
+
+# Database
+pnpm run db:migrate  # Run migrations (if configured)
+pnpm run db:reset    # Reset database (if configured)
+
+# Git
+git apply patches/patch-name.patch  # Apply patch
+git apply --reverse patches/patch-name.patch  # Rollback patch
+git format-patch -1 HEAD --stdout > patches/new-patch.patch  # Create patch
+```
+
+---
+
+**Remember**: Always test patches and migrations in development before applying to production. When in doubt, use the rollback procedures.
