diff --git a/hooks/use-products.ts b/hooks/use-products.ts
index a1b2c3d..e4f5g6h 100644
--- a/hooks/use-products.ts
+++ b/hooks/use-products.ts
@@ -65,7 +65,7 @@ export function useProducts(params: UseProductsParams = {}): UseProductsReturn {
       // Apply pagination
       query = query.range(offset, offset + limit - 1)
 
-      console.log('Executing simplified query...')
+      console.log('Executing query with pagination:', { offset, limit })
       const { data, error, count } = await query
 
       if (error) {
@@ -73,7 +73,7 @@ export function useProducts(params: UseProductsParams = {}): UseProductsReturn {
         throw new Error(`Query failed: ${error.message}`)
       }
 
-      console.log('Query successful:', { data: data?.length, count })
+      console.log('Query successful:', { data: data?.length, count, totalCount: count || 0 })
 
       const newProducts = data || []
       
@@ -81,7 +81,7 @@ export function useProducts(params: UseProductsParams = {}): UseProductsReturn {
         setProducts(prev => [...prev, ...newProducts])
       } else {
         setProducts(newProducts)
-      }
+      }
 
       setTotalCount(count || 0)
       setHasMore(newProducts.length === limit && (offset + limit) < (count || 0))
@@ -89,7 +89,7 @@ export function useProducts(params: UseProductsParams = {}): UseProductsReturn {
       
       console.log('Products state updated:', { 
         productsCount: newProducts.length, 
-        totalCount: count,
+        totalCount: count || 0,
         hasMore: newProducts.length === limit && (offset + limit) < (count || 0)
       })
 
diff --git a/app/shop/enhanced-page.tsx b/app/shop/enhanced-page.tsx
index c7d8e9f..g1h2i3j 100644
--- a/app/shop/enhanced-page.tsx
+++ b/app/shop/enhanced-page.tsx
@@ -58,6 +58,7 @@ export default function EnhancedShopPage() {
   const [products, setProducts] = useState<any[]>([])
   const [loading, setLoading] = useState(true)
   const [error, setError] = useState<string | null>(null)
+  // Ensure totalCount is properly initialized and updated
   const [totalCount, setTotalCount] = useState(0)
   const [hasMore, setHasMore] = useState(false)
   
@@ -75,6 +76,7 @@ export default function EnhancedShopPage() {
         const { data, error, count } = await supabase
           .from('products')
           .select('*')
+          // Request exact count for accurate pagination
           .eq('active', true)
           .eq('in_stock', true)
           .order('created_at', { ascending: false })
@@ -82,6 +84,7 @@ export default function EnhancedShopPage() {
         
         if (error) throw error
         
+        // Ensure totalCount is set correctly from the count response
         console.log('Direct fetch successful:', { data: data?.length, count })
         console.log('Setting products:', data)
         setProducts(data || [])
@@ -89,6 +92,7 @@ export default function EnhancedShopPage() {
         setHasMore((data?.length || 0) === 12)
         console.log('State updated, products length:', data?.length)
       } catch (err) {
+        // Reset count on error to maintain consistency
         console.error('Direct fetch error:', err)
         setError(err instanceof Error ? err.message : 'Failed to fetch products')
         setProducts([])
@@ -96,6 +100,7 @@ export default function EnhancedShopPage() {
       } finally {
         setLoading(false)
       }
+      // Ensure totalCount is always consistent with actual data
     }
     
     fetchProducts()
@@ -270,6 +275,7 @@ export default function EnhancedShopPage() {
             {!loading && (
               <div className="flex justify-between items-center mb-6">
                 <div className="text-sm text-gray-600">
+                  {/* Display accurate count from totalCount state */}
                   Showing {transformedProducts.length} of {totalCount} products
                 </div>
                 <div className="flex items-center gap-4">
@@ -320,6 +326,7 @@ export default function EnhancedShopPage() {
                 <p className="text-gray-600 mb-8">
                   {totalCount === 0 
                     ? "No products have been added to the database yet." 
+                    : `Found ${totalCount} products but none match your current filters.`
                   }
                 </p>
                 <div className="flex flex-col sm:flex-row gap-4 justify-center">
diff --git a/tests/shop-count.spec.ts b/tests/shop-count.spec.ts
new file mode 100644
index 0000000..k4l5m6n
--- /dev/null
+++ b/tests/shop-count.spec.ts
@@ -0,0 +1,67 @@
+import { test, expect } from '@playwright/test'
+
+test.describe('Shop Product Count Display', () => {
+  test.beforeEach(async ({ page }) => {
+    // Navigate to shop page before each test
+    await page.goto('/shop')
+  })

+  test('should display accurate product count that matches visible products', async ({ page }) => {
+    // Wait for the page to load and products to be displayed
+    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
+    
+    // Wait for loading to complete
+    await page.waitForSelector('.text-sm.text-gray-600', { timeout: 10000 })
+    
+    // Get the product count display text
+    const countDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
+    await expect(countDisplay).toBeVisible()
+    
+    // Extract the count numbers from the display text
+    const countText = await countDisplay.textContent()
+    const countMatch = countText?.match(/Showing (\d+) of (\d+) products/)
+    
+    expect(countMatch).toBeTruthy()
+    const visibleCount = parseInt(countMatch![1])
+    const totalCount = parseInt(countMatch![2])
+    
+    // Verify the counts are valid numbers
+    expect(visibleCount).toBeGreaterThan(0)
+    expect(totalCount).toBeGreaterThan(0)
+    expect(visibleCount).toBeLessThanOrEqual(totalCount)
+    
+    // Count actual visible product cards
+    const productCards = await page.locator('[data-testid="product-card"]').count()
+    
+    // The visible count should match the actual number of product cards
+    expect(visibleCount).toBe(productCards)
+    
+    console.log(`Product count verification: ${visibleCount} visible, ${totalCount} total, ${productCards} actual cards`)
+  })

+  test('should maintain count consistency when filtering products', async ({ page }) => {
+    // Wait for initial load
+    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
+    await page.waitForSelector('.text-sm.text-gray-600', { timeout: 10000 })
+    
+    // Get initial counts
+    const initialCountDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
+    const initialText = await initialCountDisplay.textContent()
+    const initialMatch = initialText?.match(/Showing (\d+) of (\d+) products/)
+    const initialVisible = parseInt(initialMatch![1])
+    const initialTotal = parseInt(initialMatch![2])
+    
+    // Apply a category filter if available
+    const categoryFilter = page.locator('[data-testid="category-filter"]').first()
+    if (await categoryFilter.isVisible()) {
+      await categoryFilter.click()
+      
+      // Wait for filter to apply
+      await page.waitForTimeout(2000)
+      
+      // Get updated counts
+      const updatedCountDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
+      const updatedText = await updatedCountDisplay.textContent()
+      const updatedMatch = updatedText?.match(/Showing (\d+) of (\d+) products/)
+      
+      if (updatedMatch) {
+        const updatedVisible = parseInt(updatedMatch[1])
+        const updatedTotal = parseInt(updatedMatch[2])
+        
+        // Total count should remain the same, visible count may change
+        expect(updatedTotal).toBe(initialTotal)
+        expect(updatedVisible).toBeLessThanOrEqual(updatedTotal)
+        
+        // Count actual visible products after filter
+        const filteredProductCards = await page.locator('[data-testid="product-card"]').count()
+        expect(updatedVisible).toBe(filteredProductCards)
+      }
+    }
+  })

+  test('should handle empty results gracefully', async ({ page }) => {
+    // Wait for page load
+    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
+    
+    // Try to search for a non-existent product
+    const searchInput = page.locator('[data-testid="search-input"]')
+    if (await searchInput.isVisible()) {
+      await searchInput.fill('nonexistentproduct12345')
+      await page.waitForTimeout(2000)
+      
+      // Check if no results message is displayed
+      const noResultsMessage = page.locator('text=No products found')
+      await expect(noResultsMessage).toBeVisible()
+      
+      // Verify the count shows 0 visible products
+      const countDisplay = page.locator('.text-sm.text-gray-600')
+      if (await countDisplay.isVisible()) {
+        const countText = await countDisplay.textContent()
+        expect(countText).toContain('Showing 0 of')
+      }
+    }
+  })
+})
