diff --git a/app/auth/onboarding/components/InfluencerKYCStep.tsx b/app/auth/onboarding/components/InfluencerKYCStep.tsx
index a1b2c3d..e4f5g6h 100644
--- a/app/auth/onboarding/components/InfluencerKYCStep.tsx
+++ b/app/auth/onboarding/components/InfluencerKYCStep.tsx
@@ -115,7 +115,7 @@ export default function InfluencerKYCStep({ data, updateData, onNext, onPrev }: I
       type: "id" | "selfie" | "address" | "bank",
       setState: React.Dispatch<React.SetStateAction<FileUploadState>>,
     ) => {
-      if (file.size > 10 * 1024 * 1024) {
+      if (file.size > 5 * 1024 * 1024) {
         toast({
           title: "File too large",
           description: "Please select a file smaller than 5MB",
@@ -250,7 +250,7 @@ export default function InfluencerKYCStep({ data, updateData, onNext, onPrev }: I
                 <p className="text-sm text-gray-600 mb-1">Drop your file here or click to browse</p>
-                <p className="text-xs text-gray-500">PNG, JPG, PDF up to 10MB</p>
+                <p className="text-xs text-gray-500">PNG, JPG, PDF up to 5MB</p>
                 <input
                   type="file"
                   accept={accept}
diff --git a/app/auth/onboarding/components/BrandKYBStep.tsx b/app/auth/onboarding/components/BrandKYBStep.tsx
index b2c3d4e..f5g6h7i 100644
--- a/app/auth/onboarding/components/BrandKYBStep.tsx
+++ b/app/auth/onboarding/components/BrandKYBStep.tsx
@@ -115,7 +115,7 @@ export default function BrandKYBStep({ data, updateData, onNext, onPrev }: BrandK
       type: "business_reg" | "retail_permit" | "bank_book" | "rep_id",
       setState: React.Dispatch<React.SetStateAction<FileUploadState>>,
     ) => {
-      if (file.size > 10 * 1024 * 1024) {
+      if (file.size > 5 * 1024 * 1024) {
         toast({
           title: "File too large",
           description: "Please select a file smaller than 5MB",
@@ -250,7 +250,7 @@ export default function BrandKYBStep({ data, updateData, onNext, onPrev }: BrandK
                 <p className="text-sm text-gray-600 mb-1">Drop your file here or click to browse</p>
-                <p className="text-xs text-gray-500">PNG, JPG, PDF up to 10MB</p>
+                <p className="text-xs text-gray-500">PNG, JPG, PDF up to 5MB</p>
                 <input
                   type="file"
                   accept={accept}
diff --git a/app/auth/onboarding/page.tsx b/app/auth/onboarding/page.tsx
index c3d4e5f..g6h7i8j 100644
--- a/app/auth/onboarding/page.tsx
+++ b/app/auth/onboarding/page.tsx
@@ -2,6 +2,7 @@
 
 import { useState, useEffect, useCallback } from "react"
 import { useRouter, useSearchParams } from "next/navigation"
+import { usePathname } from "next/navigation"
 import { Progress } from "@/components/ui/progress"
 import { Badge } from "@/components/ui/badge"
 import { toast } from "@/hooks/use-toast"
@@ -88,6 +89,7 @@ export default function OnboardingPage() {
 export default function OnboardingPage() {
   const router = useRouter()
   const searchParams = useSearchParams()
+  const pathname = usePathname()
   const roleParam = searchParams.get("role") as UserRole | null
 
   const [data, setData] = useState<OnboardingData>({
@@ -105,6 +107,7 @@ export default function OnboardingPage() {
     role: roleParam || "influencer",
     currentStep: 1,
     completedSteps: [],
+    stepData: {},
   })
 
   const [isLoading, setIsLoading] = useState(false)
@@ -112,6 +115,7 @@ export default function OnboardingPage() {
 
   // Load saved data from localStorage
   useEffect(() => {
+    // Load from URL params first
+    const urlRole = searchParams.get("role")
+    const urlStep = searchParams.get("step")
+    
     const saved = localStorage.getItem(STORAGE_KEY)
     if (saved) {
       try {
         const parsedData = JSON.parse(saved)
-        setData((prev) => ({ ...prev, ...parsedData }))
+        setData((prev) => ({ 
+          ...prev, 
+          ...parsedData,
+          role: urlRole || parsedData.role || "influencer",
+          currentStep: urlStep ? parseInt(urlStep) : parsedData.currentStep || 1
+        }))
       } catch (error) {
         console.error("Failed to load saved onboarding data:", error)
       }
+    } else if (urlRole) {
+      // Initialize with URL params if no saved data
+      setData(prev => ({ ...prev, role: urlRole as UserRole, currentStep: 1 }))
     }
-  }, [])
+  }, [searchParams])
 
   // Save data to localStorage (debounced)
   const saveToStorage = useCallback((newData: OnboardingData) => {
     localStorage.setItem(STORAGE_KEY, JSON.stringify(newData))
+    
+    // Update URL params for shareable state
+    const params = new URLSearchParams(searchParams)
+    params.set("role", newData.role)
+    params.set("step", newData.currentStep.toString())
+    
+    const newUrl = `${pathname}?${params.toString()}`
+    router.replace(newUrl, { scroll: false })
   }, [])
 
   // Auto-save with debouncing
@@ -140,6 +144,7 @@ export default function OnboardingPage() {
   const updateData = (updates: Partial<OnboardingData>) => {
     setData((prev) => ({ ...prev, ...updates }))
   }
 
   const nextStep = async (stepData?: Partial<OnboardingData>) => {
     if (stepData) {
       updateData(stepData)
     }
 
+    const newStep = data.currentStep + 1
+    const newCompletedSteps = [...data.completedSteps, data.currentStep]
+    
     try {
       await saveStepData(stepData || {})
-      const newStep = data.currentStep + 1
-      const newCompletedSteps = [...data.completedSteps, data.currentStep]
       updateData({ 
         currentStep: newStep, 
         completedSteps: newCompletedSteps 
       })
+      
+      // Update URL with new step
+      const params = new URLSearchParams(searchParams)
+      params.set("step", newStep.toString())
+      router.replace(`${pathname}?${params.toString()}`, { scroll: false })
     } catch (error) {
       console.error("Failed to proceed to next step:", error)
     }
   }
 
   const prevStep = () => {
     const newStep = Math.max(data.currentStep - 1, 1)
     updateData({ currentStep: newStep })
+    
+    // Update URL with new step
+    const params = new URLSearchParams(searchParams)
+    params.set("step", newStep.toString())
+    router.replace(`${pathname}?${params.toString()}`, { scroll: false })
   }
 
   const goToStep = (stepNumber: number) => {
     if (data.completedSteps.includes(stepNumber - 1) || stepNumber === 1) {
       updateData({ currentStep: stepNumber })
+      
+      // Update URL with new step
+      const params = new URLSearchParams(searchParams)
+      params.set("step", stepNumber.toString())
+      router.replace(`${pathname}?${pathname}?${params.toString()}`, { scroll: false })
     }
   }
 
diff --git a/tests/onboarding-flow.spec.ts b/tests/onboarding-flow.spec.ts
index 0000000..a1b2c3d 100644
--- /dev/null
+++ b/tests/onboarding-flow.spec.ts
@@ -0,0 +1,200 @@
+import { test, expect } from '@playwright/test'
+
+test.describe('Onboarding Flow', () => {
+  test.beforeEach(async ({ page }) => {
+    // Mock authentication for testing
+    await page.addInitScript(() => {
+      window.localStorage.setItem('onelink-auth', JSON.stringify({
+        user: { id: 'test-user', email: 'test@example.com' }
+      }))
+    })
+  })

+  test.describe('Step Progression', () => {
+    test('should progress through all onboarding steps for influencer', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer')
+      
+      // Step 1: Profile Basics
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Basics')
+      await page.fill('[data-testid="name-input"]', 'John Doe')
+      await page.fill('[data-testid="display-name-input"]', 'johndoe')
+      await page.fill('[data-testid="country-input"]', 'United States')
+      await page.fill('[data-testid="phone-input"]', '+1234567890')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 2: Influencer Profile
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Details')
+      await page.fill('[data-testid="bio-input"]', 'Fashion and lifestyle influencer')
+      await page.fill('[data-testid="audience-size-input"]', '10000-50000')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 3: KYC Verification
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Verification')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 4: Commission
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Commission')
+      await page.fill('[data-testid="default-commission-input"]', '15')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 5: Review
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Review')
+      await page.click('[data-testid="submit-onboarding-btn"]')
+      
+      // Should redirect to influencer dashboard
+      await expect(page).toHaveURL(/\/dashboard\/influencer/)
+    })
+
+    test('should progress through all onboarding steps for supplier', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=brand')
+      
+      // Step 1: Profile Basics
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Basics')
+      await page.fill('[data-testid="name-input"]', 'Jane Smith')
+      await page.fill('[data-testid="display-name-input"]', 'janesmith')
+      await page.fill('[data-testid="country-input"]', 'Canada')
+      await page.fill('[data-testid="phone-input"]', '+1987654321')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 2: Brand Profile
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Details')
+      await page.fill('[data-testid="legal-entity-name-input"]', 'Smith Enterprises Ltd')
+      await page.fill('[data-testid="website-input"]', 'https://smith-enterprises.com')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 3: KYB Verification
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Verification')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 4: Commission
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Commission')
+      await page.fill('[data-testid="default-commission-input"]', '20')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // Step 5: Review
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Review')
+      await page.click('[data-testid="submit-onboarding-btn"]')
+      
+      // Should redirect to supplier dashboard
+      await expect(page).toHaveURL(/\/dashboard\/supplier\/products/)
+    })
+  })

+  test.describe('File Upload Validation', () => {
+    test('should accept valid file types (PDF, JPG, PNG)', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer&step=3')
+      
+      // Test PDF upload
+      const pdfFile = Buffer.from('fake pdf content')
+      await page.setInputFiles('[data-testid="id-document-upload"]', {
+        name: 'test.pdf',
+        mimeType: 'application/pdf',
+        buffer: pdfFile
+      })
+      
+      await expect(page.locator('[data-testid="upload-success"]')).toBeVisible()
+      
+      // Test JPG upload
+      const jpgFile = Buffer.from('fake jpg content')
+      await page.setInputFiles('[data-testid="selfie-photo-upload"]', {
+        name: 'test.jpg',
+        mimeType: 'image/jpeg',
+        buffer: jpgFile
+      })
+      
+      await expect(page.locator('[data-testid="upload-success"]')).toBeVisible()
+    })

+    test('should reject files larger than 5MB', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer&step=3')
+      
+      // Create a file larger than 5MB
+      const largeFile = Buffer.alloc(6 * 1024 * 1024) // 6MB
+      await page.setInputFiles('[data-testid="id-document-upload"]', {
+        name: 'large-file.pdf',
+        mimeType: 'application/pdf',
+        buffer: largeFile
+      })
+      
+      await expect(page.locator('[data-testid="file-size-error"]')).toBeVisible()
+      await expect(page.locator('[data-testid="file-size-error"]')).toContainText('smaller than 5MB')
+    })

+    test('should reject invalid file types', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer&step=3')
+      
+      // Test invalid file type
+      const invalidFile = Buffer.from('fake content')
+      await page.setInputFiles('[data-testid="id-document-upload"]', {
+        name: 'test.txt',
+        mimeType: 'text/plain',
+        buffer: invalidFile
+      })
+      
+      await expect(page.locator('[data-testid="file-type-error"]')).toBeVisible()
+    })
+  })

+  test.describe('Role Path Persistence', () => {
+    test('should maintain role in URL throughout onboarding', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer')
+      
+      // Check initial URL
+      await expect(page).toHaveURL(/role=influencer/)
+      
+      // Progress to next step
+      await page.fill('[data-testid="name-input"]', 'John Doe')
+      await page.fill('[data-testid="display-name-input"]', 'johndoe')
+      await page.fill('[data-testid="country-input"]', 'United States')
+      await page.fill('[data-testid="phone-input"]', '+1234567890')
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // URL should still contain role
+      await expect(page).toHaveURL(/role=influencer/)
+      await expect(page).toHaveURL(/step=2/)
+    })

+    test('should maintain step in URL for navigation', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=brand&step=2')
+      
+      // Should start at step 2
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Details')
+      
+      // Go back to step 1
+      await page.click('[data-testid="prev-step-btn"]')
+      
+      // URL should update
+      await expect(page).toHaveURL(/step=1/)
+      
+      // Go forward to step 2
+      await page.click('[data-testid="next-step-btn"]')
+      
+      // URL should update
+      await expect(page).toHaveURL(/step=2/)
+    })
+  })

+  test.describe('URL State Management', () => {
+    test('should restore onboarding state from URL params', async ({ page }) => {
+      await page.goto('/auth/onboarding?role=influencer&step=3')
+      
+      // Should start at step 3 (KYC)
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Verification')
+      
+      // Should show influencer-specific KYC form
+      await expect(page.locator('[data-testid="kyc-form"]')).toBeVisible()
+    })

+    test('should handle direct navigation to any step', async ({ page }) => {
+      // Navigate directly to step 4
+      await page.goto('/auth/onboarding?role=brand&step=4')
+      
+      // Should show commission step
+      await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Commission')
+      
+      // Should show brand-specific commission form
+      await expect(page.locator('[data-testid="commission-form"]')).toBeVisible()
+    })
+  })
+})
diff --git a/docs/APPLY.md b/docs/APPLY.md
index d4e5f6g..h7i8j9k 100644
--- a/docs/APPLY.md
+++ b/docs/APPLY.md
@@ -0,0 +1,50 @@
+# Applying Patches
+
+This document describes how to apply patches to the One-Link project.
+
+## Patch Application Order
+
+Apply patches in the recommended order for best results.
+
+## Applying the Improve Onboarding and Docs Patch
+
+This section documents how to apply the `improve-onboarding-and-docs.patch` that enhances the existing onboarding system with better file validation, URL state management, and comprehensive testing.
+
+### What This Patch Improves
+
+The patch enhances the existing onboarding system without overwriting current functionality:
+
+1. **File Size Limits**: Reduces file upload limit from 10MB to 5MB for better performance
+2. **URL State Management**: Adds URL parameters for role and step persistence
+3. **Enhanced Testing**: Comprehensive Playwright tests for all onboarding scenarios
+4. **Better Navigation**: Improved step navigation with URL state
+
+### Step 1: Apply the Patch
+
+```bash
+# Apply the improve onboarding and docs patch
+git apply patches/improve-onboarding-and-docs.patch
+
+# Check for any conflicts
+git status
+```
+
+### Step 2: Verify the Changes
+
+```bash
+# Check that file size limits are updated
+grep -r "5MB" app/auth/onboarding/components/
+
+# Verify URL state management is added
+grep -r "usePathname" app/auth/onboarding/page.tsx
+
+# Check that tests are created
+ls tests/onboarding-flow.spec.ts
+```
+
+### Step 3: Run Tests
+
+```bash
+# Run the new onboarding tests
+npm run test:e2e -- tests/onboarding-flow.spec.ts
+```
+
+### Step 4: Test Manually
+
+1. Navigate to `/auth/onboarding?role=influencer`
+2. Verify file uploads are limited to 5MB
+3. Check that URL updates as you progress through steps
+4. Test direct navigation to different steps via URL
+
+### Troubleshooting
+
+If you encounter conflicts:
+
+1. **File size conflicts**: The patch updates file size limits from 10MB to 5MB
+2. **URL state conflicts**: New URL state management is added alongside existing localStorage
+3. **Test conflicts**: New tests are created without modifying existing ones
+
+## Next Steps
+
+After applying this patch:
+
+1. Test the onboarding flow with different roles
+2. Verify file upload validation works correctly
+3. Check that URL state persists across page refreshes
+4. Run the comprehensive test suite
