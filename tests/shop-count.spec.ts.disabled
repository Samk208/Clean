import { test, expect } from '@playwright/test'

test.describe('Shop Product Count Display', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to shop page before each test
    await page.goto('/shop')
  })

  test('should display accurate product count that matches visible products', async ({ page }) => {
    // Wait for the page to load and products to be displayed
    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
    
    // Wait for loading to complete
    await page.waitForSelector('.text-sm.text-gray-600', { timeout: 10000 })
    
    // Get the product count display text
    const countDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
    await expect(countDisplay).toBeVisible()
    
    // Extract the count numbers from the display text
    const countText = await countDisplay.textContent()
    const countMatch = countText?.match(/Showing (\d+) of (\d+) products/)
    
    expect(countMatch).toBeTruthy()
    const visibleCount = parseInt(countMatch![1])
    const totalCount = parseInt(countMatch![2])
    
    // Verify the counts are valid numbers
    expect(visibleCount).toBeGreaterThan(0)
    expect(totalCount).toBeGreaterThan(0)
    expect(visibleCount).toBeLessThanOrEqual(totalCount)
    
    // Count actual visible product cards
    const productCards = await page.locator('[data-testid="product-card"]').count()
    
    // The visible count should match the actual number of product cards
    expect(visibleCount).toBe(productCards)
    
    console.log(`Product count verification: ${visibleCount} visible, ${totalCount} total, ${productCards} actual cards`)
  })

  test('should maintain count consistency when filtering products', async ({ page }) => {
    // Wait for initial load
    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
    await page.waitForSelector('.text-sm.text-gray-600', { timeout: 10000 })
    
    // Get initial counts
    const initialCountDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
    const initialText = await initialCountDisplay.textContent()
    const initialMatch = initialText?.match(/Showing (\d+) of (\d+) products/)
    const initialVisible = parseInt(initialMatch![1])
    const initialTotal = parseInt(initialMatch![2])
    
    // Apply a category filter if available
    const categoryFilter = page.locator('[data-testid="category-filter"]').first()
    if (await categoryFilter.isVisible()) {
      await categoryFilter.click()
      
      // Wait for filter to apply
      await page.waitForTimeout(2000)
      
      // Get updated counts
      const updatedCountDisplay = page.locator('.text-sm.text-gray-600').filter({ hasText: /Showing \d+ of \d+ products/ })
      const updatedText = await updatedCountDisplay.textContent()
      const updatedMatch = updatedText?.match(/Showing (\d+) of (\d+) products/)
      
      if (updatedMatch) {
        const updatedVisible = parseInt(updatedMatch[1])
        const updatedTotal = parseInt(updatedMatch[2])
        
        // Total count should remain the same, visible count may change
        expect(updatedTotal).toBe(initialTotal)
        expect(updatedVisible).toBeLessThanOrEqual(updatedTotal)
        
        // Count actual visible products after filter
        const filteredProductCards = await page.locator('[data-testid="product-card"]').count()
        expect(updatedVisible).toBe(filteredProductCards)
      }
    }
  })

  test('should handle empty results gracefully', async ({ page }) => {
    // Wait for page load
    await page.waitForSelector('[data-testid="product-card"]', { timeout: 15000 })
    
    // Try to search for a non-existent product
    const searchInput = page.locator('[data-testid="search-input"]')
    if (await searchInput.isVisible()) {
      await searchInput.fill('nonexistentproduct12345')
      await page.waitForTimeout(2000)
      
      // Check if no results message is displayed
      const noResultsMessage = page.locator('text=No products found')
      await expect(noResultsMessage).toBeVisible()
      
      // Verify the count shows 0 visible products
      const countDisplay = page.locator('.text-sm.text-gray-600')
      if (await countDisplay.isVisible()) {
        const countText = await countDisplay.textContent()
        expect(countText).toContain('Showing 0 of')
      }
    }
  })
})
